- Rendereröt modularizálni (done)
- UiImage dependency-t eltüntetni (done)
- Logger-t megnézni, ill kicsérélni ha spdlog jobb (done)
- test_app ot betenni a libnador-ba.
- unit teszteket írni 
- TextureLoader async-ra csinálni
- Többszálúsítani mindent amit lehet
- Implement threadpool (done)



- Audio thread-et megcsinálni (done)

Initialize OpenAL in the main thread: It's recommended to initialize OpenAL and create the context in the main thread.
OpenAL context creation usually involves interacting with the underlying windowing system, which is typically not thread-safe.
So, perform the initialization steps in the main thread before starting any secondary threads.

Designate a single thread for OpenAL: To simplify the usage and minimize the chances of race conditions,
designate a specific thread to handle all OpenAL-related operations. This dedicated thread will act as the audio thread,
responsible for playing sounds, updating positions, and handling other audio-related tasks.

Use thread synchronization mechanisms: To ensure thread safety and prevent concurrent access to OpenAL functions or data,
you should use synchronization mechanisms like mutexes or locks.
Protect the critical sections of code where OpenAL functions are called with appropriate locks to ensure that only one thread can access the OpenAL context at a time.

Communicate with the audio thread: If you have other threads that need to interact with OpenAL, establish a communication mechanism with the dedicated audio thread.
You can use thread-safe queues or other inter-thread communication techniques to send requests or data to the audio thread, which will then execute the corresponding OpenAL operations.


- Camera-át befejezni a rendererell (done)

- VerticesMultiMatrix multi threaded!!! (nem jó)
- Make precompiled headers (nem jó)
- LRUCache